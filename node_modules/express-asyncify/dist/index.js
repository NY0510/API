"use strict";
// https://expressjs.com/en/4x/api.html#routing-methods
const routingMethods = [
    'checkout',
    'copy',
    'delete',
    'get',
    'head',
    'lock',
    'merge',
    'mkactivity',
    'mkcol',
    'move',
    'm-search',
    'notify',
    'options',
    'patch',
    'post',
    'purge',
    'put',
    'report',
    'search',
    'subscribe',
    'trace',
    'unlock',
    'unsubscribe',
];
const appMethods = [...routingMethods, 'route', 'use', 'all'];
const processError = (result, next) => {
    if (result instanceof Promise) {
        result.catch(next);
    }
};
const isErrorHandler = (handler) => handler.length === 4;
/**
 * Added support promise to view.
 */
const wrapHandler = (handler) => {
    if (isErrorHandler(handler)) {
        return (err, req, res, next) => processError(handler(err, req, res, next), next);
    }
    return (req, res, next) => processError(handler(req, res, next), next);
};
/**
 * Added support async/await to express.
 */
const asyncify = (app) => {
    for (const name of appMethods) {
        const method = app[name];
        if (typeof method === 'function') {
            if (name === 'route') {
                app[name] = (...args) => {
                    const router = method.apply(app, args);
                    return asyncify(router);
                };
            }
            else {
                app[name] = (...args) => {
                    const wrapArgs = args.map((val) => (typeof val === 'function' ? wrapHandler(val) : val));
                    return method.apply(app, wrapArgs);
                };
            }
        }
    }
    return app;
};
module.exports = asyncify;
